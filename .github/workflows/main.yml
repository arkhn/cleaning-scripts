name: cleaning-scripts

on: [push]

jobs:
  build:
    name: Lint and test
    runs-on: ubuntu-18.04

    strategy:
      matrix:
        python-version: [3.7]

    steps:
      - uses: actions/checkout@v1
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --max-complexity=10 --max-line-length=100 --statistics
          black --check --verbose .
      - name: Test with pytest
        run: |
          python -m pytest

  publish:
    name: Build and publish
    env:
      GITHUB_REGISTRY: docker.pkg.github.com
      IMAGE: arkhn/cleaning-scripts
      TAG: latest
    runs-on: ubuntu-18.04
    needs: build
    #if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v1
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: '3.7'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
      - name: Build and publish
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          python setup.py sdist bdist_wheel
          ls -l dist/*.tar.gz
          twine upload --skip-existing dist/*.tar.gz
#      - name: Build Docker image
#        run: docker build -t $IMAGE:$TAG .
#      - name: Publish to the docker hub
#        run: |
#          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_LOGIN }} --password-stdin
#          docker push $IMAGE:$TAG
#      - name: Publish to Github Packages
#        run: |
#          echo "${{ secrets.GITHUB_TOKEN }}" | docker login $GITHUB_REGISTRY -u ${{ github.actor }} --password-stdin
#          docker tag $IMAGE:$TAG $GITHUB_REGISTRY/${{ github.repository }}/cleaning-scripts:$TAG
#          docker push $GITHUB_REGISTRY/${{ github.repository }}/cleaning-scripts:$TAG